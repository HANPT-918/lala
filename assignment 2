import java.util.Scanner;
import java.util.Arrays;
public class dot{
    public static void main(String[] args){
        Scanner input = new Scanner(System.in);
        int n= input.nextInt();
        int m= input.nextInt();
        String x= input.nextLine();
        int a,b=0;
        String[]  Jedi=new String[n];
        int[][] more=new int[n][m];
        int[] Row=new int[1000];
        Row[0]=0;
        Arrays.fill(Row,1000);
        int[] Line=new int[1000];
        Arrays.fill(Line,1000);
        Line[0]=0;
        for(int i=0;i<n;i++){
            Jedi[i]= input.nextLine();
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                more[i][j]=Jedi[i].charAt(j);
            }
        }
        int row=0,line=0;
        for(int i=1;;i++){
            a=0;
            if(row==n-1&&line==m-1){
                System.out.println("Yes");
                System.out.println("(1,1)");
                for(int j=0;j<1000;j++){
                    if(Row[j]!=1000&&Line[j]!=1000){
                        System.out.printf("(%d,%d)\n",Row[j]+1,Line[j]+1);
                    }
                    if(Row[j]==n-1&&Line[j]==m-1){
                        break;
                    }
                }
                break;
            }
            else {
                more[row][line]=87;
                if(isDeadPath(row,line,"U",more,n,m)){
                    a=1;
                    row-=1;
                    b=1;
                }
                else if(isDeadPath(row,line,"L",more,n,m)){
                    a=1;
                    line-=1;
                    b=2;
                }
                else if(isDeadPath(row,line,"R",more,n,m)){
                    a=1;
                    line+=1;
                    b=3;
                }
                else if(isDeadPath(row,line,"D",more,n,m)){
                    a=1;
                    row+=1;
                    b=4;
                }
                Row[i]=row;
                Line[i]=line;
            }
            if(a==0){
                more[row][line]=87;
                if(b==1){
                    row+=1;
                }
                else if(b==2){
                    line+=1;
                }
                else if(b==3){
                    line-=1;
                }
                else if(b==4){
                    row-=1;
                }
                if(isDeadPath(row,line,"U",more,n,m)){
                    a=1;
                    row-=1;
                }
                else if(isDeadPath(row,line,"L",more,n,m)){
                    a=1;
                    line-=1;
                }
                else if(isDeadPath(row,line,"R",more,n,m)){
                    a=1;
                    line+=1;
                }
                else if(isDeadPath(row,line,"D",more,n,m)){
                    a=1;
                    row+=1;
                }
                if(a==0){
                    System.out.println("No");
                    break;
                }
                else {
                    Row[i-1]=row;
                    Line[i-1]=line;
                }
            }
        }
    }
    public static boolean isDeadPath(int row,int line,String direct,int[][] more,int n,int m) {
        if(direct.equals("U")&&row-1>=0){
            if(more[row-1][line]=='C') return true;
            else return false;
        }
        else if(direct.equals("L")&&line-1>=0){
            if(more[row][line-1]=='C') return true;
            else return false;
        }
        else if(direct.equals("R")&&line+1<m){
            if(more[row][line+1]=='C') return true;
            else return false;
        }
        else if(direct.equals("D")&&row+1<n){
            if(more[row+1][line]=='C') return true;
             else return false;
        }
        else return false;
    }
}
